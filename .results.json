{
  "stats": {
    "suites": 5,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-29T22:09:57.225Z",
    "end": "2023-03-29T22:09:57.455Z",
    "duration": 230
  },
  "tests": [
    {
      "title": "returns an employee with the original key value pairs and the new key value pair",
      "fullTitle": "employees updateEmployeeWithKeyAndValue(employee, key, value) returns an employee with the original key value pairs and the new key value pair",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "it does not modify the original employee, but rather returns a clone with the new data",
      "fullTitle": "employees updateEmployeeWithKeyAndValue(employee, key, value) it does not modify the original employee, but rather returns a clone with the new data",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "updates `employee` with the given `key` and `value` (it is destructive) and returns the entire updated employee",
      "fullTitle": "employees destructivelyUpdateEmployeeWithKeyAndValue(employee, key, value) updates `employee` with the given `key` and `value` (it is destructive) and returns the entire updated employee",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "deletes `key` from a clone of employee and returns the new employee (it is non-destructive)",
      "fullTitle": "employees deleteFromEmployeeByKey(employee, key) deletes `key` from a clone of employee and returns the new employee (it is non-destructive)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "does not modify the original employee (it is non-destructive)",
      "fullTitle": "employees deleteFromEmployeeByKey(employee, key) does not modify the original employee (it is non-destructive)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "returns employee without the deleted key/value pair",
      "fullTitle": "employees destructivelyDeleteFromEmployeeByKey(employee, key) returns employee without the deleted key/value pair",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "modifies the original employee",
      "fullTitle": "employees destructivelyDeleteFromEmployeeByKey(employee, key) modifies the original employee",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [],
  "passes": [
    {
      "title": "returns an employee with the original key value pairs and the new key value pair",
      "fullTitle": "employees updateEmployeeWithKeyAndValue(employee, key, value) returns an employee with the original key value pairs and the new key value pair",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "it does not modify the original employee, but rather returns a clone with the new data",
      "fullTitle": "employees updateEmployeeWithKeyAndValue(employee, key, value) it does not modify the original employee, but rather returns a clone with the new data",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "updates `employee` with the given `key` and `value` (it is destructive) and returns the entire updated employee",
      "fullTitle": "employees destructivelyUpdateEmployeeWithKeyAndValue(employee, key, value) updates `employee` with the given `key` and `value` (it is destructive) and returns the entire updated employee",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "deletes `key` from a clone of employee and returns the new employee (it is non-destructive)",
      "fullTitle": "employees deleteFromEmployeeByKey(employee, key) deletes `key` from a clone of employee and returns the new employee (it is non-destructive)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "does not modify the original employee (it is non-destructive)",
      "fullTitle": "employees deleteFromEmployeeByKey(employee, key) does not modify the original employee (it is non-destructive)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "returns employee without the deleted key/value pair",
      "fullTitle": "employees destructivelyDeleteFromEmployeeByKey(employee, key) returns employee without the deleted key/value pair",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "modifies the original employee",
      "fullTitle": "employees destructivelyDeleteFromEmployeeByKey(employee, key) modifies the original employee",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ]
}